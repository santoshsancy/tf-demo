name: 'Terraform'

on:
  push:
    branches: [ "master" ]
  pull_request:

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell GitHub Actions runner is ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    - name: Add profile credentials to ~/.aws/credentials
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }} --profile sancy39
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }} --profile sancy39      

    # Initialize a new or existing Terraform working directory by creating initial files
    - name: Terraform Init
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}
        TF_ACTION_WORKING_DIR: 'tf-demo'
        AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: terraform init --var-file=tf-vars/dev.tfvars

    # # Checks that all Terraform configuration files adhere to a canonical format
    # - name: Terraform Format
    #   run: terraform fmt -check
    # Generates an execution plan for tfcode
    - name: Terraform Plan
      env:      
        GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}
        TF_ACTION_WORKING_DIR: 'tf-demo'
        AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}    
      run: terraform plan --var-file=environments/dev.tfvars
    # Applies the changes using tf code
    - name: Terraform Apply
      env:      
        GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}
        TF_ACTION_WORKING_DIR: 'tf-demo'
        AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: terraform apply --var-file=environments/dev.tfvars -auto-approve 
